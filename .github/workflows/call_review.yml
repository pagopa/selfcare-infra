on:
  workflow_call:
    inputs:
      environment:
        type: string
        required: false
      dir:
        type: string
        required: true

env:
  ENV_NAME: "${{ inputs.environment != null && inputs.environment || (github.base_ref == 'main' && 'prod' || (github.base_ref == 'develop' && 'uat' || 'dev')) }}"

jobs:
  plan:
    runs-on: self-hosted
    environment: "${{ inputs.environment != null && inputs.environment || (github.base_ref == 'main' && 'prod' || (github.base_ref == 'develop' && 'uat' || 'dev')) }}-ci"
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID_CI }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_USE_OIDC: true
      ARM_USE_AZUREAD: true
      ARM_STORAGE_USE_AZUREAD: true

    steps:
      - uses: actions/checkout@v4
        name: Checkout

      # this workaround is necessary to pass the environment value to the next job
      # unexpectly, global env vars cannot be read to set the environment and I don't
      # want to repeat that complex expression (already repeated twice)
      - name: Read Environment
        id: setenv
        shell: bash
        run: |
          echo "environment=$ENV_NAME" >> $GITHUB_OUTPUT
          echo "$ENV_NAME"

      - name: Login
        id: login
        uses: azure/login@92a5484dfaf04ca78a94597f4f19fea633851fa2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID_CI }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Set Terraform Version
        id: set-tf-version
        run: |
          echo "terraform_version=$(cat .terraform-version)" >> $GITHUB_OUTPUT

      - uses: hashicorp/setup-terraform@v2
        name: Setup Terraform
        with:
          terraform_version: ${{ steps.set-tf-version.outputs.terraform_version}}
          terraform_wrapper: true

      - name: Terraform Init
        id: init
        working-directory: ${{ inputs.dir }}
        run: terraform init -reconfigure -backend-config="./env/${{ steps.setenv.outputs.environment }}/backend.tfvars"

      - name: Terraform Plan
        id: plan
        working-directory: ${{ inputs.dir }}
        shell: bash
        continue-on-error: true
        run: |
          terraform plan -no-color -var-file="./env/${{ steps.setenv.outputs.environment }}/terraform.tfvars" -lock-timeout=3000s | tee plan_output.txt
          OUTPUT="$(cat plan_output.txt | grep -v "Refreshing state" | tail -c 60000)"
          echo "$OUTPUT" > plan_output_multiline.txt

      - uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const output = fs.readFileSync('${{ inputs.dir }}/plan_output_multiline.txt', 'utf8');

            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            })

            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Plan')
            })

            const commentBody = `#### Terraform Plan ðŸ“–
            <details>
            <summary>Terraform Plan</summary>

            \`\`\`hcl
            ${output}
            \`\`\`

            </details>
            `;

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: commentBody,
                comment_id: botComment.id
              })
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: commentBody,
                issue_number: context.issue.number
              })
            }

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
