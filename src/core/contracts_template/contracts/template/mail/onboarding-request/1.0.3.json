{
  "subject": "QWNjb3JkbyBkaSBBZGVzaW9uZQ==",
  "body": "<!doctype html>
<html lang="it" xmlns="http://www.w3.org/1999/xhtml" xmlns:v="urn:schemas-microsoft-com:vml"
  xmlns:o="urn:schemas-microsoft-com:office:office">

<head>
  <title>Accordo di adesione</title><!--[if !mso]><!-->
  <meta http-equiv="X-UA-Compatible" content="IE=edge"><!--<![endif]-->
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
  <meta name="viewport" content="width=device-width,initial-scale=1">
  <style type="text/css">
    #outlook a {
      padding: 0;
    }

    body {
      margin: 0;
      padding: 0;
      -webkit-text-size-adjust: 100%;
      -ms-text-size-adjust: 100%;
    }

    table,
    td {
      border-collapse: collapse;
      mso-table-lspace: 0pt;
      mso-table-rspace: 0pt;
    }

    img {
      border: 0;
      height: auto;
      line-height: 100%;
      outline: none;
      text-decoration: none;
      -ms-interpolation-mode: bicubic;
    }

    p {
      display: block;
      margin: 13px 0;
    }
  </style><!--[if mso]>
<noscript>
<xml>
<o:OfficeDocumentSettings>
  <o:AllowPNG/>
  <o:PixelsPerInch>96</o:PixelsPerInch>
</o:OfficeDocumentSettings>
</xml>
</noscript>
<![endif]--><!--[if lte mso 11]>
<style type="text/css">
  .mj-outlook-group-fix { width:100% !important; }
</style>
<![endif]--><!--[if !mso]><!-->
  <link href="https://selfcare.pagopa.it/assets/font/selfhostedfonts.css" rel="stylesheet" type="text/css">
  <style type="text/css">
    @import url(https://selfcare.pagopa.it/assets/font/selfhostedfonts.css);
  </style><!--<![endif]-->
  <style type="text/css">
    @media only screen and (min-width:480px) {
      .mj-column-per-100 {
        width: 100% !important;
        max-width: 100%;
      }
    }
  </style>
  <style media="screen and (min-width:480px)">
    .moz-text-html .mj-column-per-100 {
      width: 100% !important;
      max-width: 100%;
    }
  </style>
  <style type="text/css">
    @media only screen and (max-width:480px) {
      table.mj-full-width-mobile {
        width: 100% !important;
      }

      td.mj-full-width-mobile {
        width: auto !important;
      }
    }
  </style>
  <style type="text/css">
    :root {
      color-scheme: light dark;
      supported-color-schemes: light dark;
    }

    body,
    .mail-body {
      background-color: #FFFFFF;
    }

    .header {
      background-color: #FFFFFF;
      /* border-top: 8px solid #0073E6; */
    }

    .section {
      background-color: #FFFFFF;
    }

    .title div {
      /* Text Primary */
      color: #17324D !important;
    }


    .text div {
      color: #17324D !important;
    }

    .footer-text,
    .footer-text div {
      color: #5C6F82 !important;
    }

    .link {
      color: #0073E6 !important;
    }

    .footer-text a,
    .text a {
      color: #0073E6 !important;
    }

    p {
      margin-top: 0px;
    }

    @media (prefers-color-scheme: light) {

      .dark-img,
      [data-ogsc] .dark-img {
        display: none !important;
        mso-hide: all !important;
      }

      .light-img,
      [data-ogsc] .light-img {
        display: block;
        display: block !important;
      }
    }

    @media (prefers-color-scheme: dark) {

      body,
      .mail-body {
        background-color: #323232;
      }

      .header {
        background-color: #323232;
        /* border-top: 8px solid #3da2ff; */
      }

      .section {
        background-color: #323232;
      }

      .title div {
        color: #ffffff !important;
      }

      .text div {
        color: #eeeeee !important;
      }

      .footer-text,
      .footer-text div {
        color: #CCD4DC !important;
      }

      .footer-text a,
      .text a {
        color: #94C4F4 !important;
        /* Primary Light in HSL - L = +25 */
      }

      /* IMAGES */
      /* Source: https://www.litmus.com/blog/the-ultimate-guide-to-dark-mode-for-email-marketers/ */

      .dark-img,
      [data-ogsc] .dark-img {
        display: block !important;
        overflow: visible !important;
        float: none !important;
        line-height: auto !important;
        margin-top: 0px !important;
        visibility: inherit !important;
      }

      .light-img,
      [data-ogsc] .light-img {
        display: none;
        display: none !important;
        mso-hide: all !important;
      }

    }
  </style>
  <meta http-equiv="Content-Type" content="text/html" charset="UTF-8">
  <meta name="color-scheme" content="light dark">
  <meta name="supported-color-schemes" content="light dark">
</head>

<body style="word-spacing:normal;">
  <div class="mail-body">
    <!--[if mso | IE]><table align="center" border="0" cellpadding="0" cellspacing="0" class="" role="presentation" style="width:600px;" width="600" ><tr><td style="line-height:0px;font-size:0px;mso-line-height-rule:exactly;"><![endif]-->
    <div style="margin:0px auto;max-width:600px;">
      <table align="center" border="0" cellpadding="0" cellspacing="0" role="presentation" style="width:100%;">
        <tbody>
          <tr>
            <td style="direction:ltr;font-size:0px;padding:20px 0;text-align:center;">
              <!--[if mso | IE]><table role="presentation" border="0" cellpadding="0" cellspacing="0"><![endif]--><!-- PagoPA Logo --><!--[if mso | IE]><tr><td class="header-outlook" width="600px" ><table align="center" border="0" cellpadding="0" cellspacing="0" class="header-outlook" role="presentation" style="width:600px;" width="600" ><tr><td style="line-height:0px;font-size:0px;mso-line-height-rule:exactly;"><![endif]-->
              <div class="header" style="margin:0px auto;max-width:600px;">
                <table align="center" border="0" cellpadding="0" cellspacing="0" role="presentation"
                  style="width:100%;">
                  <tbody>
                    <tr>
                      <td
                        style="direction:ltr;font-size:0px;padding:20px 0;padding-bottom:16px;padding-top:0px;text-align:center;">
                        <!--[if mso | IE]><table role="presentation" border="0" cellpadding="0" cellspacing="0"><tr><td class="" style="vertical-align:top;width:600px;" ><![endif]-->
                        <div class="mj-column-per-100 mj-outlook-group-fix"
                          style="font-size:0px;text-align:left;direction:ltr;display:inline-block;vertical-align:top;width:100%;">
                          <table border="0" cellpadding="0" cellspacing="0" role="presentation"
                            style="vertical-align:top;" width="100%">
                            <tbody>
                              <tr>
                                <td align="left" class="light-img"
                                  style="font-size:0px;padding:10px 25px;word-break:break-word;">
                                  <table border="0" cellpadding="0" cellspacing="0" role="presentation"
                                    style="border-collapse:collapse;border-spacing:0px;">
                                    <tbody>
                                      <tr>
                                        <td style="width:100px;"><img height="auto"
                                            src="https://selfcare.pagopa.it/assets/logo_pagopacorp.png"
                                            style="border:0;display:block;outline:none;text-decoration:none;height:auto;width:100%;font-size:13px;"
                                            width="100"></td>
                                      </tr>
                                    </tbody>
                                  </table>
                                </td>
                              </tr>
                              <div class="dark-img" style="mso-hide: all; display: none; padding: 10px 25px"><img
                                  src="https://selfcare.pagopa.it/assets/logo_pagopa_white.png" width="100px"
                                  class="dark-img" style="display: none"></div>
                            </tbody>
                          </table>
                        </div><!--[if mso | IE]></td></tr></table><![endif]-->
                      </td>
                    </tr>
                  </tbody>
                </table>
              </div>
              <!--[if mso | IE]></td></tr></table></td></tr><tr><td class="section-outlook" width="600px" ><table align="center" border="0" cellpadding="0" cellspacing="0" class="section-outlook" role="presentation" style="width:600px;" width="600" ><tr><td style="line-height:0px;font-size:0px;mso-line-height-rule:exactly;"><![endif]-->
              <div class="section" style="margin:0px auto;max-width:600px;">
                <table align="center" border="0" cellpadding="0" cellspacing="0" role="presentation"
                  style="width:100%;">
                  <tbody>
                    <tr>
                      <td
                        style="direction:ltr;font-size:0px;padding:20px 0;padding-bottom:0px;padding-top:0px;text-align:center;">
                        <!--[if mso | IE]><table role="presentation" border="0" cellpadding="0" cellspacing="0"><tr><td class="" style="vertical-align:top;width:600px;" ><![endif]-->
                        <div class="mj-column-per-100 mj-outlook-group-fix"
                          style="font-size:0px;text-align:left;direction:ltr;display:inline-block;vertical-align:top;width:100%;">
                          <table border="0" cellpadding="0" cellspacing="0" role="presentation"
                            style="vertical-align:top;" width="100%">
                            <tbody><!-- Title -->
                              <tr>
                                <td align="left" class="text"
                                  style="font-size:0px;padding:10px 25px;padding-top:16px;padding-bottom:16px;word-break:break-word;">
                                  <div
                                    style="font-family:Titillium Web, system-ui, sans-serif;font-size:13px;font-weight:bold;line-height:1;text-align:left;color:#17324D;">
                                    <!-- H4 Desktop (from MUI Italia)-->
                                    <h1 style="font-size: 32px; line-height: 40px; margin: 0">Accordo di adesione</h1>
                                  </div>
                                </td>
                              </tr><!-- Main Message -->
                              <tr>
                                <td align="left" class="text"
                                  style="font-size:0px;padding:10px 25px;padding-top:16px;padding-bottom:0px;word-break:break-word;">
                                  <div
                                    style="font-family:Titillium Web, system-ui, sans-serif;font-size:16px;font-weight:regular;line-height:24px;text-align:left;color:#17324D;">
                                    <p style="margin-top: 0px">Ciao,</p>
                                  </div>
                                </td>
                              </tr>
                              <tr>
                                <td align="left" class="text"
                                  style="font-size:0px;padding:10px 25px;padding-top:0px;word-break:break-word;">
                                  <div
                                    style="font-family:Titillium Web, system-ui, sans-serif;font-size:16px;font-weight:regular;line-height:24px;text-align:left;color:#17324D;">
                                    <p style="margin-top: 0px"><strong>${requesterName} ${requesterSurname}</strong> ha
                                      fatto richiesta di adesione al prodotto <strong>${productName}</strong>.</p>
                                    <p style="margin-top: 0px; margin-bottom: 0px">Per completare l’adesione, segui
                                      questi passaggi:</p>
                                    <ul style="margin-top: 0px">
                                      <li>premi sul bottone "Completa l’adesione";</li>
                                      <li>scarica l’accordo;</li>
                                      <li>fai apporre la firma digitale, in formato p7m, dal Legale Rappresentante del
                                        tuo ente;</li>
                                      <li>carica <b>entro ${expirationDate} giorni</b> l’accordo firmato.</li>
                                    </ul><a href="${confirmTokenURL}"><button type="button" style="background: #0073E6;
                   border-radius: 8px;
                   touch-action: manipulating;
                   border-style: none;
                   font-family: Titillium Web, system-ui, sans-serif;
                   font-size: 16px;
                   color: #FFFFFF;
                   cursor: pointer;
                   display: inline-block;
                   height: 48px;
                   width: 194px;
                   line-height: 20px;
                   padding: 10px 16px;
                   position: relative;
                   text-align: center;"><b>Completa l’adesione</b></button></a>
                                    <p style="color: #5C6F82; margin-top: 24px; font-size: 12px;">Firmando l’Accordo, il
                                      Legale Rappresentante dell'ente accetta espressamente e specificamente anche le
                                      singole clausole indicate nel paragrafo “Clausole ai sensi degli artt. 1341 e 1342
                                      c.c.”</p>
                                    <p style="margin-top: 0px">Oltre i ${expirationDate} giorni, non sarà più possibile
                                      finalizzare
                                      l’adesione. Sarà quindi necessario inviare una nuova richiesta.</p>
                                    <p style="margin-top: 0px">Se non riconosci l’utente che ha fatto la richiesta di
                                      adesione o non è stata fatta dal tuo ente e vuoi eliminarla, puoi farlo <a
                                        href="${rejectTokenURL}" style="color: #0073e6" class="link">da questa
                                        pagina</a>.</p>
                                    <p style="margin-top: 0px">Per problemi tecnici o domande in merito al funzionamento
                                      dell’Area Riservata, scrivi a <a href="mailto:areariservata@assistenza.pagopa.it"
                                        style="color: #0073e6" class="link">areariservata@assistenza.pagopa.it</a>.</p>
                                  </div>
                                </td>
                              </tr>
                              <tr>
                                <td align="left" class="text"
                                  style="font-size:0px;padding:10px 25px;padding-bottom:0px;word-break:break-word;">
                                  <div
                                    style="font-family:Titillium Web, system-ui, sans-serif;font-size:16px;line-height:24px;text-align:left;color:#17324D;">
                                    <p style="margin-top: 0px">A presto,<br aria-hidden="true">Il team di PagoPA S.p.A.
                                    </p>
                                  </div>
                                </td>
                              </tr>
                            </tbody>
                          </table>
                        </div><!--[if mso | IE]></td></tr></table><![endif]-->
                      </td>
                    </tr>
                  </tbody>
                </table>
              </div>
              <!--[if mso | IE]></td></tr></table></td></tr><![endif]--><!-- Divider --><!--[if mso | IE]><tr><td class="section-outlook" width="600px" ><table align="center" border="0" cellpadding="0" cellspacing="0" class="section-outlook" role="presentation" style="width:600px;" width="600" ><tr><td style="line-height:0px;font-size:0px;mso-line-height-rule:exactly;"><![endif]-->
              <div class="section" style="margin:0px auto;max-width:600px;">
                <table align="center" border="0" cellpadding="0" cellspacing="0" role="presentation"
                  style="width:100%;">
                  <tbody>
                    <tr>
                      <td
                        style="direction:ltr;font-size:0px;padding:20px 0;padding-bottom:0px;padding-top:0px;text-align:center;">
                        <!--[if mso | IE]><table role="presentation" border="0" cellpadding="0" cellspacing="0"><tr><td class="" style="vertical-align:top;width:600px;" ><![endif]-->
                        <div class="mj-column-per-100 mj-outlook-group-fix"
                          style="font-size:0px;text-align:left;direction:ltr;display:inline-block;vertical-align:top;width:100%;">
                          <table border="0" cellpadding="0" cellspacing="0" role="presentation"
                            style="vertical-align:top;" width="100%">
                            <tbody>
                              <tr>
                                <td align="center"
                                  style="font-size:0px;padding:10px 25px;padding-top:16px;padding-bottom:16px;word-break:break-word;">
                                  <p style="border-top:solid 1px lightgrey;font-size:1px;margin:0px auto;width:100%;">
                                  </p><!--[if mso | IE]><table align="center" border="0" cellpadding="0" cellspacing="0" style="border-top:solid 1px lightgrey;font-size:1px;margin:0px auto;width:550px;" role="presentation" width="550px" ><tr><td style="height:0;line-height:0;"> &nbsp;
</td></tr></table><![endif]-->
                                </td>
                              </tr>
                            </tbody>
                          </table>
                        </div><!--[if mso | IE]></td></tr></table><![endif]-->
                      </td>
                    </tr>
                  </tbody>
                </table>
              </div>
              <!--[if mso | IE]></td></tr></table></td></tr><![endif]--><!-- Footer/Disclaimer --><!--[if mso | IE]><tr><td class="section-outlook" width="600px" ><table align="center" border="0" cellpadding="0" cellspacing="0" class="section-outlook" role="presentation" style="width:600px;" width="600" ><tr><td style="line-height:0px;font-size:0px;mso-line-height-rule:exactly;"><![endif]-->
              <div class="section" style="margin:0px auto;max-width:600px;">
                <table align="center" border="0" cellpadding="0" cellspacing="0" role="presentation"
                  style="width:100%;">
                  <tbody>
                    <tr>
                      <td
                        style="direction:ltr;font-size:0px;padding:20px 0;padding-bottom:16px;padding-top:0px;text-align:center;">
                        <!--[if mso | IE]><table role="presentation" border="0" cellpadding="0" cellspacing="0"><tr><td class="" style="vertical-align:top;width:600px;" ><![endif]-->
                        <div class="mj-column-per-100 mj-outlook-group-fix"
                          style="font-size:0px;text-align:left;direction:ltr;display:inline-block;vertical-align:top;width:100%;">
                          <table border="0" cellpadding="0" cellspacing="0" role="presentation"
                            style="vertical-align:top;" width="100%">
                            <tbody>
                              <tr>
                                <td align="left" class="footer-text"
                                  style="font-size:0px;padding:10px 25px;word-break:break-word;">
                                  <div
                                    style="font-family:Titillium Web, system-ui, sans-serif;font-size:14px;line-height:20px;text-align:left;color:#5C6F82;">
                                    <p style="margin-top: 0px">Ricevi questo messaggio perché hai un’utenza attiva
                                      nell’Area Riservata dell’ente.</p>
                                  </div>
                                </td>
                              </tr>
                            </tbody>
                          </table>
                        </div><!--[if mso | IE]></td></tr></table><![endif]-->
                      </td>
                    </tr>
                  </tbody>
                </table>
              </div><!--[if mso | IE]></td></tr></table></td></tr></table><![endif]-->
            </td>
          </tr>
        </tbody>
      </table>
    </div><!--[if mso | IE]></td></tr></table><![endif]-->
  </div>
</body>

</html>",
  "encoded": true
}