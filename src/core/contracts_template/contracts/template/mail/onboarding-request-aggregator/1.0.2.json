{
  "subject": "QWNjb3JkbyBkaSBBZGVzaW9uZQ==",
  "body": "<!doctype html>
<html lang="it" dir="auto" xmlns="http://www.w3.org/1999/xhtml" xmlns:v="urn:schemas-microsoft-com:vml"
  xmlns:o="urn:schemas-microsoft-com:office:office">

<head>
  <title>Accordo di adesione</title><!--[if !mso]><!-->
  <meta http-equiv="X-UA-Compatible" content="IE=edge"><!--<![endif]-->
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <style type="text/css">
    #outlook a,
    body {
      padding: 0
    }

    body {
      margin: 0;
      -webkit-text-size-adjust: 100%;
      -ms-text-size-adjust: 100%
    }

    table,
    td {
      border-collapse: collapse;
      mso-table-lspace: 0;
      mso-table-rspace: 0
    }

    img {
      border: 0;
      height: auto;
      line-height: 100%;
      outline: none;
      text-decoration: none;
      -ms-interpolation-mode: bicubic
    }

    p {
      display: block;
      margin: 13px 0
    }
  </style><!--[if mso]>
    <noscript>
    <xml>
    <o:OfficeDocumentSettings>
      <o:AllowPNG/>
      <o:PixelsPerInch>96</o:PixelsPerInch>
    </o:OfficeDocumentSettings>
    </xml>
    </noscript>
    <![endif]--><!--[if lte mso 11]>
    <style type="text/css">
      .mj-outlook-group-fix { width:100% !important; }
    </style>
    <![endif]--><!--[if !mso]><!-->
  <link href="https://selfcare.pagopa.it/assets/font/selfhostedfonts.css" rel="stylesheet" type="text/css">
  <style type="text/css">
    @import url(https://selfcare.pagopa.it/assets/font/selfhostedfonts.css);
  </style><!--<![endif]-->
  <style type="text/css">
    @media only screen and (min-width:480px) {
      .mj-column-per-100 {
        max-width: 100%;
        width: 100% !important
      }
    }
  </style>
  <style media="screen and (min-width:480px)">
    .moz-text-html .mj-column-per-100 {
      max-width: 100%;
      width: 100% !important
    }
  </style>
  <meta http-equiv="Content-Type" content="text/html" charset="utf-8">
  <meta name="color-scheme" content="light dark">
  <meta name="supported-color-schemes" content="light dark">
</head>

<body style="word-spacing:normal">
  <div class="mail-body" lang="it" dir="auto">
    <!--[if mso | IE]><table align="center" border="0" cellpadding="0" cellspacing="0" class="" role="presentation" style="width:600px;" width="600" ><tr><td style="line-height:0px;font-size:0px;mso-line-height-rule:exactly;"><![endif]-->
    <div style="margin:0 auto;max-width:600px">
      <table align="center" border="0" cellpadding="0" cellspacing="0" role="presentation" style="width:100%">
        <tbody>
          <tr>
            <td style="direction:ltr;font-size:0;padding:20px 0;text-align:center">
              <!--[if mso | IE]><table role="presentation" border="0" cellpadding="0" cellspacing="0"><![endif]-->
              <!--[if mso | IE]><tr><td class="section-outlook" width="600px" ><table align="center" border="0" cellpadding="0" cellspacing="0" class="section-outlook" role="presentation" style="width:600px;" width="600" ><tr><td style="line-height:0px;font-size:0px;mso-line-height-rule:exactly;"><![endif]-->
              <div class="section" style="margin:0 auto;max-width:600px">
                <table align="center" border="0" cellpadding="0" cellspacing="0" role="presentation" style="width:100%">
                  <tbody>
                    <tr>
                      <td style="direction:ltr;font-size:0;padding:0;text-align:center">
                        <!--[if mso | IE]><table role="presentation" border="0" cellpadding="0" cellspacing="0"><tr><td class="" style="vertical-align:top;width:600px;" ><![endif]-->
                        <div class="mj-column-per-100 mj-outlook-group-fix"
                          style="direction:ltr;display:inline-block;font-size:0;text-align:left;vertical-align:top;width:100%">
                          <table border="0" cellpadding="0" cellspacing="0" role="presentation"
                            style="vertical-align:top" width="100%">
                            <tbody>
                              <tr>
                                <td align="left" class="text"
                                  style="font-size:0;padding:16px 25px;word-break:break-word">
                                  <div
                                    style="color:#17324d;font-family:Titillium Web,system-ui,sans-serif;font-size:13px;font-weight:700;line-height:1;text-align:left">
                                    <h1 style="font-size:32px;line-height:40px;margin:0">Accordo di adesione</h1>
                                  </div>
                                </td>
                              </tr>
                              <tr>
                                <td align="left" class="text"
                                  style="font-size:0;padding:16px 25px 0;word-break:break-word">
                                  <div
                                    style="color:#17324d;font-family:Titillium Web,system-ui,sans-serif;font-size:16px;font-weight:regular;line-height:24px;text-align:left">
                                    <p style="margin-top:0">Ciao,</p>
                                  </div>
                                </td>
                              </tr>
                              <tr>
                                <td align="left" class="text"
                                  style="font-size:0;padding:0 25px 10px;word-break:break-word">
                                  <div
                                    style="color:#17324d;font-family:Titillium Web,system-ui,sans-serif;font-size:16px;font-weight:regular;line-height:24px;text-align:left">
                                    <p style="margin-top:0"> <strong>${requesterName} ${requesterSurname}</strong> ha
                                      fatto richiesta di adesione come ente aggregatore al prodotto
                                      <strong>${productName}</strong>. </p>
                                    <p style="margin-bottom:0;margin-top:0">Per completare l’adesione, per il tuo ente e
                                      per quelli indicati come enti aggregati, segui questi passaggi:</p>
                                    <ul style="margin-top:0">
                                      <li>premi sul bottone "Completa l’adesione";</li>
                                      <li>scarica l’accordo;</li>
                                      <li>fai apporre la firma digitale, in formato p7m, dal Legale Rappresentante del
                                        tuo ente o da un suo procuratore;</li>
                                      <li>carica <b>entro ${expirationDate} giorni</b> l’accordo firmato.</li>
                                    </ul> <a href="${confirmTokenURL}"> <button type="button"
                                        style="background:#0073e6;border-radius:8px;border-style:none;color:#fff;cursor:pointer;display:inline-block;font-family:Titillium Web,system-ui,sans-serif;font-size:16px;height:48px;line-height:20px;padding:10px 16px;position:relative;text-align:center;touch-action:manipulating;width:194px">
                                        <b>Completa l’adesione</b> </button> </a>
                                    <p style="color:#5c6f82;font-size:12px;margin-top:24px"> Firmando l’Accordo, il
                                      Legale Rappresentante dell'ente accetta espressamente e specificamente anche le
                                      singole clausole indicate nel paragrafo “Clausole ai sensi degli artt. 1341 e 1342
                                      c.c.” </p>
                                    <p style="margin-top:0">Oltre i ${expirationDate} giorni, non sarà più possibile
                                      finalizzare l’adesione. Sarà quindi necessario inviare una nuova richiesta.</p>
                                    <p style="margin-top:0"> Se non riconosci l’utente che ha fatto la richiesta di
                                      adesione o non è stata fatta dal tuo ente e vuoi eliminarla, puoi farlo <a
                                        href="${rejectTokenURL}" style="color:#0073e6" class="link">da questa
                                        pagina</a>. </p>
                                    <p style="margin-top:0"> Per problemi tecnici o domande in merito al funzionamento
                                      dell’Area Riservata, scrivi a <a href="mailto:areariservata@assistenza.pagopa.it"
                                        style="color:#0073e6" class="link">areariservata@assistenza.pagopa.it</a>. </p>
                                  </div>
                                </td>
                              </tr>
                              <tr>
                                <td align="left" class="text"
                                  style="font-size:0;padding:10px 25px 0;word-break:break-word">
                                  <div
                                    style="color:#17324d;font-family:Titillium Web,system-ui,sans-serif;font-size:16px;line-height:24px;text-align:left">
                                    <p style="margin-top:0">A presto,<br aria-hidden="true">Il team di PagoPA S.p.A.</p>
                                  </div>
                                </td>
                              </tr>
                            </tbody>
                          </table>
                        </div> <!--[if mso | IE]></td></tr></table><![endif]-->
                      </td>
                    </tr>
                  </tbody>
                </table>
              </div> <!--[if mso | IE]></td></tr></table></td></tr><![endif]--> <!--[if mso | IE]></table><![endif]-->
            </td>
          </tr>
        </tbody>
      </table>
    </div> <!--[if mso | IE]></td></tr></table><![endif]-->
  </div>
</body>

</html>",
  "encoded": true
}