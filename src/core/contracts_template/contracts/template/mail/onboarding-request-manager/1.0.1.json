{
  "subject": "UmljaGllc3RhIGRpIGFnZ2l1bnRhIEFtbWluaXN0cmF0b3Jl",
  "body": "<!doctype html>
<html lang="it" dir="auto" xmlns="http://www.w3.org/1999/xhtml" xmlns:v="urn:schemas-microsoft-com:vml"
  xmlns:o="urn:schemas-microsoft-com:office:office">

<head>
  <title>Richiesta di aggiunta Amministratore</title><!--[if !mso]><!-->
  <meta http-equiv="X-UA-Compatible" content="IE=edge"><!--<![endif]-->
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <style type="text/css">
    #outlook a,
    body {
      padding: 0
    }

    body {
      margin: 0;
      -webkit-text-size-adjust: 100%;
      -ms-text-size-adjust: 100%
    }

    table,
    td {
      border-collapse: collapse;
      mso-table-lspace: 0;
      mso-table-rspace: 0
    }

    img {
      border: 0;
      height: auto;
      line-height: 100%;
      outline: none;
      text-decoration: none;
      -ms-interpolation-mode: bicubic
    }

    p {
      display: block;
      margin: 13px 0
    }
  </style><!--[if mso]>
    <noscript>
    <xml>
    <o:OfficeDocumentSettings>
      <o:AllowPNG/>
      <o:PixelsPerInch>96</o:PixelsPerInch>
    </o:OfficeDocumentSettings>
    </xml>
    </noscript>
    <![endif]--><!--[if lte mso 11]>
    <style type="text/css">
      .mj-outlook-group-fix { width:100% !important; }
    </style>
    <![endif]--><!--[if !mso]><!-->
  <link href="https://selfcare.pagopa.it/assets/font/selfhostedfonts.css" rel="stylesheet" type="text/css">
  <style type="text/css">
    @import url(https://selfcare.pagopa.it/assets/font/selfhostedfonts.css);
  </style><!--<![endif]-->
  <style type="text/css">
    @media only screen and (min-width:480px) {
      .mj-column-per-100 {
        max-width: 100%;
        width: 100% !important
      }
    }
  </style>
  <style media="screen and (min-width:480px)">
    .moz-text-html .mj-column-per-100 {
      max-width: 100%;
      width: 100% !important
    }
  </style>
  <style type="text/css">
    @media only screen and (max-width:479px) {
      table.mj-full-width-mobile {
        width: 100% !important
      }

      td.mj-full-width-mobile {
        width: auto !important
      }
    }
  </style>
  <meta http-equiv="Content-Type" content="text/html" charset="utf-8">
  <meta name="color-scheme" content="light dark">
  <meta name="supported-color-schemes" content="light dark">
</head>

<body style="word-spacing:normal">
  <div class="mail-body" lang="it" dir="auto">
    <!--[if mso | IE]><table align="center" border="0" cellpadding="0" cellspacing="0" class="" role="presentation" style="width:600px;" width="600" ><tr><td style="line-height:0px;font-size:0px;mso-line-height-rule:exactly;"><![endif]-->
    <div style="margin:0 auto;max-width:600px">
      <table align="center" border="0" cellpadding="0" cellspacing="0" role="presentation" style="width:100%">
        <tbody>
          <tr>
            <td style="direction:ltr;font-size:0;padding:20px 0;text-align:center">
              <!--[if mso | IE]><table role="presentation" border="0" cellpadding="0" cellspacing="0"><![endif]-->
              <!--[if mso | IE]><tr><td class="header-outlook" width="600px" ><table align="center" border="0" cellpadding="0" cellspacing="0" class="header-outlook" role="presentation" style="width:600px;" width="600" ><tr><td style="line-height:0px;font-size:0px;mso-line-height-rule:exactly;"><![endif]-->
              <div class="header" style="margin:0 auto;max-width:600px">
                <table align="center" border="0" cellpadding="0" cellspacing="0" role="presentation" style="width:100%">
                  <tbody>
                    <tr>
                      <td style="direction:ltr;font-size:0;padding:0 0 16px;text-align:center">
                        <!--[if mso | IE]><table role="presentation" border="0" cellpadding="0" cellspacing="0"><tr><td class="" style="vertical-align:top;width:600px;" ><![endif]-->
                        <div class="mj-column-per-100 mj-outlook-group-fix"
                          style="direction:ltr;display:inline-block;font-size:0;text-align:left;vertical-align:top;width:100%">
                          <table border="0" cellpadding="0" cellspacing="0" role="presentation"
                            style="vertical-align:top" width="100%">
                            <tbody>
                              <tr>
                                <td align="left" class="light-img"
                                  style="font-size:0;padding:10px 25px;word-break:break-word">
                                  <table border="0" cellpadding="0" cellspacing="0" role="presentation"
                                    style="border-collapse:collapse;border-spacing:0">
                                    <tbody>
                                      <tr>
                                        <td style="width:100px"> <img alt
                                            src="https://selfcare.pagopa.it/assets/logo_pagopacorp.png"
                                            style="border:0;display:block;font-size:13px;height:auto;outline:none;text-decoration:none;width:100%"
                                            width="100" height="auto"> </td>
                                      </tr>
                                    </tbody>
                                  </table>
                                </td>
                              </tr>
                              <div class="dark-img" style="mso-hide:all;display:none;padding:10px 25px"> <img
                                  src="https://selfcare.pagopa.it/assets/logo_pagopa_white.png" width="100px"
                                  class="dark-img" style="display:none"> </div>
                            </tbody>
                          </table>
                        </div> <!--[if mso | IE]></td></tr></table><![endif]-->
                      </td>
                    </tr>
                  </tbody>
                </table>
              </div>
              <!--[if mso | IE]></td></tr></table></td></tr><tr><td class="section-outlook" width="600px" ><table align="center" border="0" cellpadding="0" cellspacing="0" class="section-outlook" role="presentation" style="width:600px;" width="600" ><tr><td style="line-height:0px;font-size:0px;mso-line-height-rule:exactly;"><![endif]-->
              <div class="section" style="margin:0 auto;max-width:600px">
                <table align="center" border="0" cellpadding="0" cellspacing="0" role="presentation" style="width:100%">
                  <tbody>
                    <tr>
                      <td style="direction:ltr;font-size:0;padding:0;text-align:center">
                        <!--[if mso | IE]><table role="presentation" border="0" cellpadding="0" cellspacing="0"><tr><td class="" style="vertical-align:top;width:600px;" ><![endif]-->
                        <div class="mj-column-per-100 mj-outlook-group-fix"
                          style="direction:ltr;display:inline-block;font-size:0;text-align:left;vertical-align:top;width:100%">
                          <table border="0" cellpadding="0" cellspacing="0" role="presentation"
                            style="vertical-align:top" width="100%">
                            <tbody>
                              <tr>
                                <td align="left" class="text"
                                  style="font-size:0;padding:16px 25px;word-break:break-word">
                                  <div
                                    style="color:#17324d;font-family:Titillium Web,system-ui,sans-serif;font-size:13px;font-weight:700;line-height:1;text-align:left">
                                    <h1 style="font-size:32px;line-height:40px;margin:0">Richiesta di aggiunta
                                      Amministratore</h1>
                                  </div>
                                </td>
                              </tr>
                              <tr>
                                <td align="left" class="text"
                                  style="font-size:0;padding:24px 25px 0;word-break:break-word">
                                  <div
                                    style="color:#17324d;font-family:Titillium Web,system-ui,sans-serif;font-size:16px;font-weight:regular;line-height:24px;text-align:left">
                                    <p style="margin-top:0">Ciao,</p>
                                  </div>
                                </td>
                              </tr>
                              <tr>
                                <td align="left" class="text"
                                  style="font-size:0;padding:0 25px 10px;word-break:break-word">
                                  <div
                                    style="color:#17324d;font-family:Titillium Web,system-ui,sans-serif;font-size:16px;font-weight:regular;line-height:24px;text-align:left">
                                    <p style="margin-top:0"> abbiamo ricevuto da <strong>${requesterName}
                                        ${requesterSurname}</strong> la <br>richiesta di modificare l'Amministratore per
                                      il prodotto <strong>${productName}</strong><br> nell'Area Riservata di
                                      <strong>${institutionName}.</strong> </p>
                                    <p style="margin-bottom:0;margin-top:24px">Per completare la richiesta, segui questi
                                      passaggi:</p>
                                    <ul style="list-style-type:square;margin-bottom:24px;margin-top:0">
                                      <li>premi sul bottone "Completa la richiesta";</li>
                                      <li>scarica il documento;</li>
                                      <li>fai apporre la firma digitale, in formato p7m, dal Legale <br>Rappresentante
                                        del tuo ente;</li>
                                      <li>carica il documento e invialo <b>entro ${expirationDate} giorni.</b></li>
                                    </ul> <a href="${confirmTokenURL}"> <button type="button"
                                        style="background:#0073e6;border-radius:8px;border-style:none;color:#fff;cursor:pointer;display:inline-block;font-family:Titillium Web,system-ui,sans-serif;font-size:16px;height:48px;line-height:20px;padding:10px 16px;position:relative;text-align:center;touch-action:manipulating;width:194px">
                                        <b>Completa la richiesta</b> </button> </a>
                                    <p style="margin-top:24px">Oltre i ${expirationDate} giorni, non sarà più possibile
                                      completare l’operazione. <br>Sarà quindi necessario inviare una nuova richiesta.
                                    </p>
                                    <p style="margin-top:16px"> Nella richiesta di aggiunta Amministratore, la persona
                                      indicata <br>come Legale Rappresentante è <strong>${managerName}
                                        ${managerSurname}</strong>, <br>mentre in precedenza era stato indicato
                                      <strong>${previousManagerName} ${previousManagerSurname}</strong>. </p>
                                    <p style="margin-top:16px"> Ti chiediamo quindi di <strong>aggiornare l’elenco degli
                                        utenti</strong><br> nominati per il tuo ente e di rimuoverli in caso di
                                      cessazione <br>tempestivamente, in ogni caso al più tardi <strong>entro
                                        ${expirationDate} giorni</strong> dalla<br> ricezione di questa
                                      comunicazione.<br> Per farlo, accedi alla sezione Utenti in <a
                                        href="https://selfcare.pagopa.it/auth/login" style="color:#0073e6">Area
                                        Riservata.</a> </p>
                                    <p style="margin-top:16px"> PagoPA S.p.A non potrà essere ritenuta responsabile per
                                      <br>l'attivazione dell’utenza del nuovo soggetto indicato se la <br>nomina viene
                                      caricata nell'Area Riservata firmata dal Legale <br>Rappresentante indicato. </p>
                                    <p style="margin-top:16px"> Allo stesso modo PagoPA S.p.A. non potrà essere ritenuta
                                      <br>responsabile di quanto effettuato dagli utenti cessati, poiché è <br>diretta
                                      responsabilità dell’ente rimuoverli tempestivamente. <br> </p>
                                    <p
                                      style="border-bottom:1px solid #e9e9e9;display:inline-block;margin-bottom:18px;margin-top:8px;width:125px">
                                    </p>
                                    <p style="margin-top:0"> Se disconosci le operazioni o le informazioni riportate in
                                      questa email, comunicalo direttamente a <a
                                        href="mailto:areariservata@assistenza.pagopa.it" style="color:#0073e6"
                                        class="link">areariservata@assistenza.pagopa.it</a>. </p>
                                  </div>
                                </td>
                              </tr>
                              <tr>
                                <td align="left" class="text"
                                  style="font-size:0;padding:10px 25px 0;word-break:break-word">
                                  <div
                                    style="color:#17324d;font-family:Titillium Web,system-ui,sans-serif;font-size:16px;line-height:24px;text-align:left">
                                    <p style="margin-top:0">A presto,<br aria-hidden="true">Il team di PagoPA S.p.A.</p>
                                  </div>
                                </td>
                              </tr>
                            </tbody>
                          </table>
                        </div> <!--[if mso | IE]></td></tr></table><![endif]-->
                      </td>
                    </tr>
                  </tbody>
                </table>
              </div> <!--[if mso | IE]></td></tr></table></td></tr><![endif]--> <!--[if mso | IE]></table><![endif]-->
            </td>
          </tr>
        </tbody>
      </table>
    </div> <!--[if mso | IE]></td></tr></table><![endif]-->
  </div>
</body>

</html>",
  "encoded": true
}