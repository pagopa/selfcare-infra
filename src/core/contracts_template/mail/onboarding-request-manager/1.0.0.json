{
  "subject": "UmljaGllc3RhIGRpIGFnZ2l1bnRhIEFtbWluaXN0cmF0b3Jl",
  "body": "<!doctype html>
<html lang="it" xmlns="http://www.w3.org/1999/xhtml" xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office">
  <head>
    <title>
      Richiesta di aggiunta Amministratore
    </title>
    <!--[if !mso]><!-->
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <!--<![endif]-->
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <style type="text/css">
      #outlook a { padding:0; }
      body { margin:0;padding:0;-webkit-text-size-adjust:100%;-ms-text-size-adjust:100%; }
      table, td { border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt; }
      img { border:0;height:auto;line-height:100%; outline:none;text-decoration:none;-ms-interpolation-mode:bicubic; }
      p { display:block;margin:13px 0; }
    </style>
    <!--[if mso]>
    <noscript>
    <xml>
    <o:OfficeDocumentSettings>
      <o:AllowPNG/>
      <o:PixelsPerInch>96</o:PixelsPerInch>
    </o:OfficeDocumentSettings>
    </xml>
    </noscript>
    <![endif]-->
    <!--[if lte mso 11]>
    <style type="text/css">
      .mj-outlook-group-fix { width:100% !important; }
    </style>
    <![endif]-->
    
      <!--[if !mso]><!-->
        <link href="https://selfcare.pagopa.it/assets/font/selfhostedfonts.css" rel="stylesheet" type="text/css">
        <style type="text/css">
          @import url(https://selfcare.pagopa.it/assets/font/selfhostedfonts.css);
        </style>
      <!--<![endif]-->

    
    
    <style type="text/css">
      @media only screen and (min-width:480px) {
        .mj-column-per-100 { width:100% !important; max-width: 100%; }
      }
    </style>
    <style media="screen and (min-width:480px)">
      .moz-text-html .mj-column-per-100 { width:100% !important; max-width: 100%; }
    </style>
    
  
    <style type="text/css">
    
    

    @media only screen and (max-width:480px) {
      table.mj-full-width-mobile { width: 100% !important; }
      td.mj-full-width-mobile { width: auto !important; }
    }
  
    </style>
    <style type="text/css">
    
    </style>
    <meta http-equiv="Content-Type" content="text/html" charset="UTF-8" />
      <meta name="color-scheme" content="light dark" />
      <meta name="supported-color-schemes" content="light dark" />
  </head>
  <body style="word-spacing:normal;">
    
    
      <div
         class="mail-body" style=""
      >
        <!-- mj-include fails to read file : ../style.css at C:\dev\BE\selfcare-email-templates\PEC_Adesione\user\style.css -->
      
      <!--[if mso | IE]><table align="center" border="0" cellpadding="0" cellspacing="0" class="" role="presentation" style="width:600px;" width="600" ><tr><td style="line-height:0px;font-size:0px;mso-line-height-rule:exactly;"><![endif]-->
    
      
      <div  style="margin:0px auto;max-width:600px;">
        
        <table
           align="center" border="0" cellpadding="0" cellspacing="0" role="presentation" style="width:100%;"
        >
          <tbody>
            <tr>
              <td
                 style="direction:ltr;font-size:0px;padding:20px 0;text-align:center;"
              >
                <!--[if mso | IE]><table role="presentation" border="0" cellpadding="0" cellspacing="0"><![endif]-->
                  
      <!-- PagoPA Logo -->
          <!--[if mso | IE]><tr><td class="header-outlook" width="600px" ><table align="center" border="0" cellpadding="0" cellspacing="0" class="header-outlook" role="presentation" style="width:600px;" width="600" ><tr><td style="line-height:0px;font-size:0px;mso-line-height-rule:exactly;"><![endif]-->
    
      
      <div  class="header" style="margin:0px auto;max-width:600px;">
        
        <table
           align="center" border="0" cellpadding="0" cellspacing="0" role="presentation" style="width:100%;"
        >
          <tbody>
            <tr>
              <td
                 style="direction:ltr;font-size:0px;padding:20px 0;padding-bottom:16px;padding-top:0px;text-align:center;"
              >
                <!--[if mso | IE]><table role="presentation" border="0" cellpadding="0" cellspacing="0"><tr><td class="" style="vertical-align:top;width:600px;" ><![endif]-->
            
      <div
         class="mj-column-per-100 mj-outlook-group-fix" style="font-size:0px;text-align:left;direction:ltr;display:inline-block;vertical-align:top;width:100%;"
      >
        
      <table
         border="0" cellpadding="0" cellspacing="0" role="presentation" style="vertical-align:top;" width="100%"
      >
        <tbody>
          
              <tr>
                <td
                   align="left" class="light-img" style="font-size:0px;padding:10px 25px;word-break:break-word;"
                >
                  
      <table
         border="0" cellpadding="0" cellspacing="0" role="presentation" style="border-collapse:collapse;border-spacing:0px;"
      >
        <tbody>
          <tr>
            <td  style="width:100px;">
              
      <img
         height="auto" src="https://selfcare.pagopa.it/assets/logo_pagopacorp.png" style="border:0;display:block;outline:none;text-decoration:none;height:auto;width:100%;font-size:13px;" width="100"
      />
    
            </td>
          </tr>
        </tbody>
      </table>
    
                </td>
              </tr>
            <div
        class="dark-img"
        style="mso-hide: all; display: none; padding: 10px 25px"
      >
        <img
          src="https://selfcare.pagopa.it/assets/logo_pagopa_white.png"
          width="100px"
          class="dark-img"
          style="display: none"
        />
      </div>
        </tbody>
      </table>
    
      </div>
    
          <!--[if mso | IE]></td></tr></table><![endif]-->
              </td>
            </tr>
          </tbody>
        </table>
        
      </div>
    
      
      <!--[if mso | IE]></td></tr></table></td></tr><tr><td class="section-outlook" width="600px" ><table align="center" border="0" cellpadding="0" cellspacing="0" class="section-outlook" role="presentation" style="width:600px;" width="600" ><tr><td style="line-height:0px;font-size:0px;mso-line-height-rule:exactly;"><![endif]-->
    
      
      <div  class="section" style="margin:0px auto;max-width:600px;">
        
        <table
           align="center" border="0" cellpadding="0" cellspacing="0" role="presentation" style="width:100%;"
        >
          <tbody>
            <tr>
              <td
                 style="direction:ltr;font-size:0px;padding:20px 0;padding-bottom:0px;padding-top:0px;text-align:center;"
              >
                <!--[if mso | IE]><table role="presentation" border="0" cellpadding="0" cellspacing="0"><tr><td class="" style="vertical-align:top;width:600px;" ><![endif]-->
            
      <div
         class="mj-column-per-100 mj-outlook-group-fix" style="font-size:0px;text-align:left;direction:ltr;display:inline-block;vertical-align:top;width:100%;"
      >
        
      <table
         border="0" cellpadding="0" cellspacing="0" role="presentation" style="vertical-align:top;" width="100%"
      >
        <tbody>
          <!-- Title -->
              <tr>
                <td
                   align="left" class="text" style="font-size:0px;padding:10px 25px;padding-top:16px;padding-bottom:16px;word-break:break-word;"
                >
                  
      <div
         style="font-family:Titillium Web, system-ui, sans-serif;font-size:13px;font-weight:bold;line-height:1;text-align:left;color:#17324D;"
      ><!-- H4 Desktop (from MUI Italia)-->
            <h1 style="font-size: 32px; line-height: 40px; margin: 0"> Richiesta di aggiunta Amministratore </h1></div>
    
                </td>
              </tr>
            <!-- Main Message -->
              <tr>
                <td
                   align="left" class="text" style="font-size:0px;padding:10px 25px;padding-top:24px;padding-bottom:0px;word-break:break-word;"
                >
                  
      <div
         style="font-family:Titillium Web, system-ui, sans-serif;font-size:16px;font-weight:regular;line-height:24px;text-align:left;color:#17324D;"
      ><p style="margin-top: 0px">Ciao,</p></div>
    
                </td>
              </tr>
            
              <tr>
                <td
                   align="left" class="text" style="font-size:0px;padding:10px 25px;padding-top:0px;word-break:break-word;"
                >
                  
      <div
         style="font-family:Titillium Web, system-ui, sans-serif;font-size:16px;font-weight:regular;line-height:24px;text-align:left;color:#17324D;"
      ><p style="margin-top: 0px"> abbiamo ricevuto da <strong>${requesterName} ${requesterSurname}</strong> la <br />richiesta di modificare l'Amministratore per il prodotto <strong>${productName}</strong><br /> nell'Area Riservata di <strong>${institutionName}.</strong>
            </p>
            <p style="margin-top: 24px; margin-bottom: 0px"> Per completare la richiesta, segui questi passaggi: </p>
            <ul style="margin-top: 0px; margin-bottom: 24px; list-style-type:square">
              <li>premi sul bottone "Completa la richiesta";</li>
              <li>scarica il documento;</li>
              <li>fai apporre la firma digitale, in formato p7m, dal Legale <br />Rappresentante del tuo ente;</li>
              <li>carica il documento e invialo <b>entro 30 giorni.</b></li>
            </ul>
            <a href="${confirmTokenURL}">
              <button type="button" style="background: #0073E6;
                           border-radius: 8px;
                           touch-action: manipulating;
                           border-style: none;
                           font-family: Titillium Web, system-ui, sans-serif;
                           font-size: 16px;
                           color: #FFFFFF;
                           cursor: pointer;
                           display: inline-block;
                           height: 48px;
                           width: 194px;
                           line-height: 20px;
                           padding: 10px 16px;
                           position: relative;
                           text-align: center;"><b>Completa la richiesta</b>
              </button>
            </a>
            <p style="margin-top: 24px"> Oltre i 30 giorni, non sarà più possibile completare l’operazione. <br />Sarà quindi necessario inviare una nuova richiesta. </p>
            <p style="margin-top: 16px"> Nella richiesta di aggiunta Amministratore, la persona indicata <br />come Legale Rappresentante è <strong>${managerName} ${managerSurname}</strong>, <br />mentre in precedenza era stato indicato <strong>${previousManagerName} ${previousManagerSurname}</strong>.</p>
            <p style="margin-top: 16px"> Ti chiediamo quindi di <strong>aggiornare l’elenco degli utenti</strong><br /> nominati per il tuo ente e di rimuoverli in caso di cessazione <br />tempestivamente, in ogni caso al più tardi <strong>entro 30 giorni</strong> dalla<br /> ricezione di questa comunicazione.<br/>
Per farlo, accedi alla sezione Utenti in <a href="https://selfcare.pagopa.it/auth/login" style="color: #0073e6">Area Riservata.</a> </p>
            <p style="margin-top: 16px"> PagoPA S.p.A non potrà essere ritenuta responsabile per <br />l'attivazione dell’utenza del nuovo soggetto indicato se la <br />nomina viene caricata nell'Area Riservata firmata dal Legale <br />Rappresentante indicato. </p>
            <p style="margin-top: 16px"> Allo stesso modo PagoPA S.p.A. non potrà essere ritenuta <br />responsabile di quanto effettuato dagli utenti cessati, poiché è <br />diretta responsabilità dell’ente rimuoverli tempestivamente. <br /></p>

            
            
            
            
            
            <p style="width: 125px; display: inline-block;border-bottom: 1px solid #E9E9E9; margin-top: 8px; margin-bottom: 18px"></p>
            <p style="margin-top: 0px"> Se disconosci le operazioni o le informazioni riportate in questa email, comunicalo direttamente a <a href="mailto:areariservata@assistenza.pagopa.it" style="color: #0073e6" class="link">areariservata@assistenza.pagopa.it</a>. </p></div>
    
                </td>
              </tr>
            
              <tr>
                <td
                   align="left" class="text" style="font-size:0px;padding:10px 25px;padding-bottom:0px;word-break:break-word;"
                >
                  
      <div
         style="font-family:Titillium Web, system-ui, sans-serif;font-size:16px;line-height:24px;text-align:left;color:#17324D;"
      ><p style="margin-top: 0px"> A presto,<br aria-hidden="true" />Il team di PagoPA S.p.A. </p></div>
    
                </td>
              </tr>
            
        </tbody>
      </table>
    
      </div>
    
          <!--[if mso | IE]></td></tr></table><![endif]-->
              </td>
            </tr>
          </tbody>
        </table>
        
      </div>
    
      
      <!--[if mso | IE]></td></tr></table></td></tr><![endif]-->
        <!-- Divider --><!-- mj-include fails to read file : ../partials/divider.mjml at C:\dev\BE\selfcare-email-templates\PEC_Adesione\user\partials\divider.mjml --><!-- Footer/Disclaimer --><!-- mj-include fails to read file : ../partials/footer.mjml at C:\dev\BE\selfcare-email-templates\PEC_Adesione\user\partials\footer.mjml -->
    
                <!--[if mso | IE]></table><![endif]-->
              </td>
            </tr>
          </tbody>
        </table>
        
      </div>
    
      
      <!--[if mso | IE]></td></tr></table><![endif]-->
    
    
      </div>
    
  </body>
</html>
  ",
  "encoded": true
}
