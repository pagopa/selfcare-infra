{
  "subject": "QWRlc2lvbmUgcmlmaXV0YXRh",
  "body": "<!doctype html>
<html lang="it" xmlns="http://www.w3.org/1999/xhtml">

<head>
    <title> Adesione rifiutata </title>
    <!--[if !mso]><!-->
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <!--<![endif]-->
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <style type="text/css">
    #outlook a {
      padding: 0;
    }

    body {
      margin: 0;
      padding: 0;
      -webkit-text-size-adjust: 100%;
      -ms-text-size-adjust: 100%;
    }

    table,
    td {
      border-collapse: collapse;
      mso-table-lspace: 0pt;
      mso-table-rspace: 0pt;
    }

    img {
      border: 0;
      height: auto;
      line-height: 100%;
      outline: none;
      text-decoration: none;
      -ms-interpolation-mode: bicubic;
    }

    p {
      display: block;
      margin: 13px 0;
    }

    </style>
    <!--[if mso]>
    <noscript>
        <xml>
            <o:OfficeDocumentSettings>
                <o:AllowPNG/>
                <o:PixelsPerInch>96</o:PixelsPerInch>
            </o:OfficeDocumentSettings>
        </xml>
    </noscript>
    <![endif]-->
    <!--[if lte mso 11]>
    <style type="text/css">
          .mj-outlook-group-fix { width:100% !important; }

    </style>
    <![endif]-->
    <!--[if !mso]><!-->
    <link href="https://selfcare.pagopa.it/assets/font/selfhostedfonts.css" rel="stylesheet" type="text/css">
    <style type="text/css">
    @import url(https://selfcare.pagopa.it/assets/font/selfhostedfonts.css);

    </style>
    <!--<![endif]-->
    <style type="text/css">
    @media only screen and (min-width:480px) {
      .mj-column-per-100 {
        width: 100% !important;
        max-width: 100%;
      }
    }

    </style>
    <style media="screen and (min-width:480px)">
    .moz-text-html .mj-column-per-100 {
      width: 100% !important;
      max-width: 100%;
    }

    </style>
    <style type="text/css">
    </style>
    <meta http-equiv="Content-Type" content="text/html" charset="UTF-8"/>
    <meta name="color-scheme" content="light dark"/>
    <meta name="supported-color-schemes" content="light dark"/>
</head>

<body style="word-spacing:normal;">
<div class="mail-body" style="">
    <!--[if mso | IE]>
    <table align="center" border="0" cellpadding="0" cellspacing="0" class="" style="width:600px;" width="600">
        <tr>
            <td style="line-height:0px;font-size:0px;mso-line-height-rule:exactly;"><![endif]-->
    <div style="margin:0px auto;max-width:600px;">
        <table align="center" border="0" cellpadding="0" cellspacing="0" role="presentation" style="width:100%;">
            <tbody>
            <tr>
                <td style="direction:ltr;font-size:0px;padding:20px 0;text-align:center;">
                    <!--[if mso | IE]>
                    <table role="presentation" border="0" cellpadding="0" cellspacing="0"><![endif]-->
                    <!-- PagoPA Logo -->
                    <!--[if mso | IE]>
                    <tr>
                        <td class="section-outlook" width="600px">
                            <table align="center" border="0" cellpadding="0" cellspacing="0" class="section-outlook"
                                   style="width:600px;" width="600">
                                <tr>
                                    <td style="line-height:0px;font-size:0px;mso-line-height-rule:exactly;"><![endif]-->
                    <div class="section" style="margin:0px auto;max-width:600px;">
                        <table align="center" border="0" cellpadding="0" cellspacing="0" role="presentation"
                               style="width:100%;">
                            <tbody>
                            <tr>
                                <td style="direction:ltr;font-size:0px;padding:20px 0;padding-bottom:0px;padding-top:0px;text-align:center;">
                                    <!--[if mso | IE]>
                                    <table role="presentation" border="0" cellpadding="0" cellspacing="0">
                                        <tr>
                                            <td class="" style="vertical-align:top;width:600px;"><![endif]-->
                                    <div class="mj-column-per-100 mj-outlook-group-fix"
                                         style="font-size:0px;text-align:left;direction:ltr;display:inline-block;vertical-align:top;width:100%;">
                                        <table border="0" cellpadding="0" cellspacing="0" role="presentation"
                                               style="vertical-align:top;" width="100%">
                                            <tbody>
                                            <!-- Title -->
                                            <tr>
                                                <td align="left" class="text"
                                                    style="font-size:0px;padding:10px 25px;padding-top:16px;padding-bottom:16px;word-break:break-word;">
                                                    <div style="font-family:Titillium Web, system-ui, sans-serif;font-size:13px;font-weight:bold;line-height:1;text-align:left;color:#17324D;">
                                                        <!-- H4 Desktop (from MUI Italia)-->
                                                        <h1 style="font-size: 32px; line-height: 40px; margin: 0">
                                                            Adesione rifiutata </h1>
                                                    </div>
                                                </td>
                                            </tr>
                                            <!-- Main Message -->
                                            <tr>
                                                <td align="left" class="text"
                                                    style="font-size:0px;padding:10px 25px;padding-top:16px;padding-bottom:0px;word-break:break-word;">
                                                    <div style="font-family:Titillium Web, system-ui, sans-serif;font-size:16px;font-weight:regular;line-height:24px;text-align:left;color:#17324D;">
                                                        <p style="margin-top: 0px">Ciao,</p>
                                                    </div>
                                                </td>
                                            </tr>
                                            <tr>
                                                <td align="left" class="text"
                                                    style="font-size:0px;padding:10px 25px;padding-top:0px;word-break:break-word;">
                                                    <div style="font-family:Titillium Web, system-ui, sans-serif;font-size:16px;font-weight:regular;line-height:24px;text-align:left;color:#17324D;">
                                                        <p style="margin-top: 0px"> la richiesta di adesione al prodotto
                                                            <strong>${productName}</strong> non è andata a buon fine.
                                                            Prova ad aderire al prodotto scelto inviando una nuova
                                                            richiesta da <a href="${onboardingUrl}"
                                                                            style="color: #0073e6" class="link">questo
                                                                link</a>.</p>
                                                        <p style="margin-top: 0px"> Se hai problemi tecnici o domande in
                                                            merito al funzionamento dell’Area Riservata, scrivi a <a
                                                                    href="mailto:selfcare@assistenza.pagopa.it"
                                                                    style="color: #0073e6" class="link">selfcare@assistenza.pagopa.it</a>.
                                                        </p>
                                                    </div>
                                                </td>
                                            </tr>
                                            <tr>
                                                <td align="left" class="text"
                                                    style="font-size:0px;padding:10px 25px;padding-bottom:0px;word-break:break-word;">
                                                    <div style="font-family:Titillium Web, system-ui, sans-serif;font-size:16px;line-height:24px;text-align:left;color:#17324D;">
                                                        <p style="margin-top: 0px"> A presto,<br aria-hidden="true"/>il
                                                            team di PagoPA S.p.A. </p>
                                                    </div>
                                                </td>
                                            </tr>
                                            </tbody>
                                        </table>
                                    </div>
                                    <!--[if mso | IE]></td></tr></table><![endif]-->
                                </td>
                            </tr>
                            </tbody>
                        </table>
                    </div>
                    <!--[if mso | IE]></td></tr></table></td></tr><![endif]-->
                    <!-- Divider -->
                    <!-- Footer/Disclaimer -->
                    <!--[if mso | IE]></table><![endif]-->
                </td>
            </tr>
            </tbody>
        </table>
    </div>
    <!--[if mso | IE]></td></tr></table><![endif]-->
</div>
</body>

</html>",
  "encoded": true
}
