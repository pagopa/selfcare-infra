{
  "subject": "Tm90aWZpY2EgYWNjb3JkbyBkaSBhZGVzaW9uZQ==",
  "body": "PCFkb2N0eXBlIGh0bWw+DQo8aHRtbCBsYW5nPSJpdCIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWwiIHhtbG5zOnY9InVybjpzY2hlbWFzLW1pY3Jvc29mdC1jb206dm1sIiB4bWxuczpvPSJ1cm46c2NoZW1hcy1taWNyb3NvZnQtY29tOm9mZmljZTpvZmZpY2UiPg0KDQo8aGVhZD4NCiAgICA8dGl0bGU+IE5vdGlmaWNhIGFjY29yZG8gZGkgYWRlc2lvbmUgPC90aXRsZT4NCiAgICA8IS0tW2lmICFtc29dPjwhLS0+DQogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4NCiAgICA8IS0tPCFbZW5kaWZdLS0+DQogICAgPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9VVRGLTgiPg0KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MSI+DQogICAgPHN0eWxlIHR5cGU9InRleHQvY3NzIj4NCiAgICAjb3V0bG9vayBhIHsNCiAgICAgIHBhZGRpbmc6IDA7DQogICAgfQ0KDQogICAgYm9keSB7DQogICAgICBtYXJnaW46IDA7DQogICAgICBwYWRkaW5nOiAwOw0KICAgICAgLXdlYmtpdC10ZXh0LXNpemUtYWRqdXN0OiAxMDAlOw0KICAgICAgLW1zLXRleHQtc2l6ZS1hZGp1c3Q6IDEwMCU7DQogICAgfQ0KDQogICAgdGFibGUsDQogICAgdGQgew0KICAgICAgYm9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZTsNCiAgICAgIG1zby10YWJsZS1sc3BhY2U6IDBwdDsNCiAgICAgIG1zby10YWJsZS1yc3BhY2U6IDBwdDsNCiAgICB9DQoNCiAgICBpbWcgew0KICAgICAgYm9yZGVyOiAwOw0KICAgICAgaGVpZ2h0OiBhdXRvOw0KICAgICAgbGluZS1oZWlnaHQ6IDEwMCU7DQogICAgICBvdXRsaW5lOiBub25lOw0KICAgICAgdGV4dC1kZWNvcmF0aW9uOiBub25lOw0KICAgICAgLW1zLWludGVycG9sYXRpb24tbW9kZTogYmljdWJpYzsNCiAgICB9DQoNCiAgICBwIHsNCiAgICAgIGRpc3BsYXk6IGJsb2NrOw0KICAgICAgbWFyZ2luOiAxM3B4IDA7DQogICAgfQ0KICA8L3N0eWxlPg0KICAgIDwhLS1baWYgbXNvXT4NCiAgICA8bm9zY3JpcHQ+DQogICAgICAgIDx4bWw+DQogICAgICAgICAgICA8bzpPZmZpY2VEb2N1bWVudFNldHRpbmdzPg0KICAgICAgICAgICAgICAgIDxvOkFsbG93UE5HLz4NCiAgICAgICAgICAgICAgICA8bzpQaXhlbHNQZXJJbmNoPjk2PC9vOlBpeGVsc1BlckluY2g+DQogICAgICAgICAgICA8L286T2ZmaWNlRG9jdW1lbnRTZXR0aW5ncz4NCiAgICAgICAgPC94bWw+DQogICAgPC9ub3NjcmlwdD4NCiAgICA8IVtlbmRpZl0tLT4NCiAgICA8IS0tW2lmIGx0ZSBtc28gMTFdPg0KICAgIDxzdHlsZSB0eXBlPSJ0ZXh0L2NzcyI+DQogICAgICAgICAgLm1qLW91dGxvb2stZ3JvdXAtZml4IHsgd2lkdGg6MTAwJSAhaW1wb3J0YW50OyB9DQogICAgICAgIDwvc3R5bGU+DQogICAgPCFbZW5kaWZdLS0+DQogICAgPCEtLVtpZiAhbXNvXT48IS0tPg0KICAgIDxsaW5rIGhyZWY9Imh0dHBzOi8vc2VsZmNhcmUucGFnb3BhLml0L2Fzc2V0cy9mb250L3NlbGZob3N0ZWRmb250cy5jc3MiIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiPg0KICAgIDxzdHlsZSB0eXBlPSJ0ZXh0L2NzcyI+DQogICAgQGltcG9ydCB1cmwoaHR0cHM6Ly9zZWxmY2FyZS5wYWdvcGEuaXQvYXNzZXRzL2ZvbnQvc2VsZmhvc3RlZGZvbnRzLmNzcyk7DQogIDwvc3R5bGU+DQogICAgPCEtLTwhW2VuZGlmXS0tPg0KICAgIDxzdHlsZSB0eXBlPSJ0ZXh0L2NzcyI+DQogICAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWluLXdpZHRoOjQ4MHB4KSB7DQogICAgICAubWotY29sdW1uLXBlci0xMDAgew0KICAgICAgICB3aWR0aDogMTAwJSAhaW1wb3J0YW50Ow0KICAgICAgICBtYXgtd2lkdGg6IDEwMCU7DQogICAgICB9DQogICAgfQ0KICA8L3N0eWxlPg0KICAgIDxzdHlsZSBtZWRpYT0ic2NyZWVuIGFuZCAobWluLXdpZHRoOjQ4MHB4KSI+DQogICAgLm1vei10ZXh0LWh0bWwgLm1qLWNvbHVtbi1wZXItMTAwIHsNCiAgICAgIHdpZHRoOiAxMDAlICFpbXBvcnRhbnQ7DQogICAgICBtYXgtd2lkdGg6IDEwMCU7DQogICAgfQ0KICA8L3N0eWxlPg0KICAgIDxzdHlsZSB0eXBlPSJ0ZXh0L2NzcyI+DQogICAgPC9zdHlsZT4NCiAgICA8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbCIgY2hhcnNldD0iVVRGLTgiIC8+DQogICAgPG1ldGEgbmFtZT0iY29sb3Itc2NoZW1lIiBjb250ZW50PSJsaWdodCBkYXJrIiAvPg0KICAgIDxtZXRhIG5hbWU9InN1cHBvcnRlZC1jb2xvci1zY2hlbWVzIiBjb250ZW50PSJsaWdodCBkYXJrIiAvPg0KPC9oZWFkPg0KDQo8Ym9keSBzdHlsZT0id29yZC1zcGFjaW5nOm5vcm1hbDsiPg0KPGRpdiBjbGFzcz0ibWFpbC1ib2R5IiBzdHlsZT0iIj4NCiAgICA8IS0tW2lmIG1zbyB8IElFXT48dGFibGUgYWxpZ249ImNlbnRlciIgYm9yZGVyPSIwIiBjZWxscGFkZGluZz0iMCIgY2VsbHNwYWNpbmc9IjAiIGNsYXNzPSIiIHN0eWxlPSJ3aWR0aDo2MDBweDsiIHdpZHRoPSI2MDAiID48dHI+PHRkIHN0eWxlPSJsaW5lLWhlaWdodDowcHg7Zm9udC1zaXplOjBweDttc28tbGluZS1oZWlnaHQtcnVsZTpleGFjdGx5OyI+PCFbZW5kaWZdLS0+DQogICAgPGRpdiBzdHlsZT0ibWFyZ2luOjBweCBhdXRvO21heC13aWR0aDo2MDBweDsiPg0KICAgICAgICA8dGFibGUgYWxpZ249ImNlbnRlciIgYm9yZGVyPSIwIiBjZWxscGFkZGluZz0iMCIgY2VsbHNwYWNpbmc9IjAiIHJvbGU9InByZXNlbnRhdGlvbiIgc3R5bGU9IndpZHRoOjEwMCU7Ij4NCiAgICAgICAgICAgIDx0Ym9keT4NCiAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICA8dGQgc3R5bGU9ImRpcmVjdGlvbjpsdHI7Zm9udC1zaXplOjBweDtwYWRkaW5nOjIwcHggMDt0ZXh0LWFsaWduOmNlbnRlcjsiPg0KICAgICAgICAgICAgICAgICAgICA8IS0tW2lmIG1zbyB8IElFXT48dGFibGUgcm9sZT0icHJlc2VudGF0aW9uIiBib3JkZXI9IjAiIGNlbGxwYWRkaW5nPSIwIiBjZWxsc3BhY2luZz0iMCI+PCFbZW5kaWZdLS0+DQogICAgICAgICAgICAgICAgICAgIDwhLS0gUGFnb1BBIExvZ28gLS0+DQogICAgICAgICAgICAgICAgICAgIDwhLS1baWYgbXNvIHwgSUVdPjx0cj48dGQgY2xhc3M9InNlY3Rpb24tb3V0bG9vayIgd2lkdGg9IjYwMHB4IiA+PHRhYmxlIGFsaWduPSJjZW50ZXIiIGJvcmRlcj0iMCIgY2VsbHBhZGRpbmc9IjAiIGNlbGxzcGFjaW5nPSIwIiBjbGFzcz0ic2VjdGlvbi1vdXRsb29rIiBzdHlsZT0id2lkdGg6NjAwcHg7IiB3aWR0aD0iNjAwIiA+PHRyPjx0ZCBzdHlsZT0ibGluZS1oZWlnaHQ6MHB4O2ZvbnQtc2l6ZTowcHg7bXNvLWxpbmUtaGVpZ2h0LXJ1bGU6ZXhhY3RseTsiPjwhW2VuZGlmXS0tPg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzZWN0aW9uIiBzdHlsZT0ibWFyZ2luOjBweCBhdXRvO21heC13aWR0aDo2MDBweDsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRhYmxlIGFsaWduPSJjZW50ZXIiIGJvcmRlcj0iMCIgY2VsbHBhZGRpbmc9IjAiIGNlbGxzcGFjaW5nPSIwIiByb2xlPSJwcmVzZW50YXRpb24iIHN0eWxlPSJ3aWR0aDoxMDAlOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRib2R5Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIHN0eWxlPSJkaXJlY3Rpb246bHRyO2ZvbnQtc2l6ZTowcHg7cGFkZGluZzoyMHB4IDA7cGFkZGluZy1ib3R0b206MHB4O3BhZGRpbmctdG9wOjBweDt0ZXh0LWFsaWduOmNlbnRlcjsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLVtpZiBtc28gfCBJRV0+PHRhYmxlIHJvbGU9InByZXNlbnRhdGlvbiIgYm9yZGVyPSIwIiBjZWxscGFkZGluZz0iMCIgY2VsbHNwYWNpbmc9IjAiPjx0cj48dGQgY2xhc3M9IiIgc3R5bGU9InZlcnRpY2FsLWFsaWduOnRvcDt3aWR0aDo2MDBweDsiID48IVtlbmRpZl0tLT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1qLWNvbHVtbi1wZXItMTAwIG1qLW91dGxvb2stZ3JvdXAtZml4IiBzdHlsZT0iZm9udC1zaXplOjBweDt0ZXh0LWFsaWduOmxlZnQ7ZGlyZWN0aW9uOmx0cjtkaXNwbGF5OmlubGluZS1ibG9jazt2ZXJ0aWNhbC1hbGlnbjp0b3A7d2lkdGg6MTAwJTsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0YWJsZSBib3JkZXI9IjAiIGNlbGxwYWRkaW5nPSIwIiBjZWxsc3BhY2luZz0iMCIgcm9sZT0icHJlc2VudGF0aW9uIiBzdHlsZT0idmVydGljYWwtYWxpZ246dG9wOyIgd2lkdGg9IjEwMCUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gVGl0bGUgLS0+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBhbGlnbj0ibGVmdCIgY2xhc3M9InRleHQiIHN0eWxlPSJmb250LXNpemU6MHB4O3BhZGRpbmc6MTBweCAyNXB4O3BhZGRpbmctdG9wOjE2cHg7cGFkZGluZy1ib3R0b206MTZweDt3b3JkLWJyZWFrOmJyZWFrLXdvcmQ7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPSJmb250LWZhbWlseTpUaXRpbGxpdW0gV2ViLCBzeXN0ZW0tdWksIHNhbnMtc2VyaWY7Zm9udC1zaXplOjEzcHg7Zm9udC13ZWlnaHQ6Ym9sZDtsaW5lLWhlaWdodDoxO3RleHQtYWxpZ246bGVmdDtjb2xvcjojMTczMjREOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gSDQgRGVza3RvcCAoZnJvbSBNVUkgSXRhbGlhKS0tPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDEgc3R5bGU9ImZvbnQtc2l6ZTogMzJweDsgbGluZS1oZWlnaHQ6IDQwcHg7IG1hcmdpbjogMCI+IE5vdGlmaWNhIGFjY29yZG8gZGkgYWRlc2lvbmUgPC9oMT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gTWFpbiBNZXNzYWdlIC0tPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgYWxpZ249ImxlZnQiIGNsYXNzPSJ0ZXh0IiBzdHlsZT0iZm9udC1zaXplOjBweDtwYWRkaW5nOjEwcHggMjVweDtwYWRkaW5nLXRvcDoxNnB4O3BhZGRpbmctYm90dG9tOjBweDt3b3JkLWJyZWFrOmJyZWFrLXdvcmQ7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPSJmb250LWZhbWlseTpUaXRpbGxpdW0gV2ViLCBzeXN0ZW0tdWksIHNhbnMtc2VyaWY7Zm9udC1zaXplOjE2cHg7Zm9udC13ZWlnaHQ6cmVndWxhcjtsaW5lLWhlaWdodDoyNHB4O3RleHQtYWxpZ246bGVmdDtjb2xvcjojMTczMjREOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIHN0eWxlPSJtYXJnaW4tdG9wOiAwcHgiPkNpYW8sPC9wPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGFsaWduPSJsZWZ0IiBjbGFzcz0idGV4dCIgc3R5bGU9ImZvbnQtc2l6ZTowcHg7cGFkZGluZzoxMHB4IDI1cHg7cGFkZGluZy10b3A6MHB4O3dvcmQtYnJlYWs6YnJlYWstd29yZDsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9ImZvbnQtZmFtaWx5OlRpdGlsbGl1bSBXZWIsIHN5c3RlbS11aSwgc2Fucy1zZXJpZjtmb250LXNpemU6MTZweDtmb250LXdlaWdodDpyZWd1bGFyO2xpbmUtaGVpZ2h0OjI0cHg7dGV4dC1hbGlnbjpsZWZ0O2NvbG9yOiMxNzMyNEQ7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgc3R5bGU9Im1hcmdpbi10b3A6IDBweCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Ryb25nPiR7cmVxdWVzdGVyTmFtZX0gJHtyZXF1ZXN0ZXJTdXJuYW1lfTwvc3Ryb25nPiBoYSBmYXR0byB1bmEgcmljaGllc3RhIGRpIGFkZXNpb25lIGFsIHByb2RvdHRvIDxzdHJvbmc+JHtwcm9kdWN0TmFtZX08L3N0cm9uZz4gcGVyIGNvbnRvIGRpIDxzdHJvbmc+JHtpbnN0aXR1dGlvbk5hbWV9PC9zdHJvbmc+Lg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIHN0eWxlPSJtYXJnaW4tdG9wOiAwcHgiPiBQdW9pIHZpc3VhbGl6emFyZSBsYSByaWNoaWVzdGEgZGkgYWRlc2lvbmUgdHJhbWl0ZSA8YSBocmVmPSIke2NvbmZpcm1Ub2tlblVSTH0iIHN0eWxlPSJjb2xvcjogIzAwNzNlNiIgY2xhc3M9ImxpbmsiPnF1ZXN0byBsaW5rPC9hPi4gPC9wPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBzdHlsZT0ibWFyZ2luLXRvcDogMHB4Ij4gU2UgaGFpIHByb2JsZW1pIHRlY25pY2kgbyBkb21hbmRlIGluIG1lcml0byBhbCBmdW56aW9uYW1lbnRvIGRlbGzigJlBcmVhIFJpc2VydmF0YSwgc2NyaXZpIGEgPGEgaHJlZj0ibWFpbHRvOnNlbGZjYXJlQGFzc2lzdGVuemEucGFnb3BhLml0IiBzdHlsZT0iY29sb3I6ICMwMDczZTYiIGNsYXNzPSJsaW5rIj5zZWxmY2FyZUBhc3Npc3RlbnphLnBhZ29wYS5pdDwvYT4uIDwvcD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBhbGlnbj0ibGVmdCIgY2xhc3M9InRleHQiIHN0eWxlPSJmb250LXNpemU6MHB4O3BhZGRpbmc6MTBweCAyNXB4O3BhZGRpbmctYm90dG9tOjBweDt3b3JkLWJyZWFrOmJyZWFrLXdvcmQ7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPSJmb250LWZhbWlseTpUaXRpbGxpdW0gV2ViLCBzeXN0ZW0tdWksIHNhbnMtc2VyaWY7Zm9udC1zaXplOjE2cHg7bGluZS1oZWlnaHQ6MjRweDt0ZXh0LWFsaWduOmxlZnQ7Y29sb3I6IzE3MzI0RDsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBzdHlsZT0ibWFyZ2luLXRvcDogMHB4Ij4gQSBwcmVzdG8sPGJyIGFyaWEtaGlkZGVuPSJ0cnVlIiAvPmlsIHRlYW0gZGkgUGFnb1BBIFMucC5BLiA8L3A+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3Rib2R5Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGFibGU+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS1baWYgbXNvIHwgSUVdPjwvdGQ+PC90cj48L3RhYmxlPjwhW2VuZGlmXS0tPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGFibGU+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8IS0tW2lmIG1zbyB8IElFXT48L3RkPjwvdHI+PC90YWJsZT48L3RkPjwvdHI+PCFbZW5kaWZdLS0+DQogICAgICAgICAgICAgICAgICAgIDwhLS0gRGl2aWRlciAtLT4NCiAgICAgICAgICAgICAgICAgICAgPCEtLSBGb290ZXIvRGlzY2xhaW1lciAtLT4NCiAgICAgICAgICAgICAgICAgICAgPCEtLVtpZiBtc28gfCBJRV0+PC90YWJsZT48IVtlbmRpZl0tLT4NCiAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgIDwvdGJvZHk+DQogICAgICAgIDwvdGFibGU+DQogICAgPC9kaXY+DQogICAgPCEtLVtpZiBtc28gfCBJRV0+PC90ZD48L3RyPjwvdGFibGU+PCFbZW5kaWZdLS0+DQo8L2Rpdj4NCjwvYm9keT4NCg0KPC9odG1sPg==",
  "encoded": true
}